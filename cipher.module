<?php

function cipher_menu() {
    $items['shift_cipher'] = array(
        'title' => 'Shift Cipher',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cipher_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['encrypted_phrase'] = array(
        'title' => 'Encrypted Phrase',
        'page callback' => 'shift_cipher',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

function cipher_form() {
    $form['shift_value'] = array (
        '#title' => 'Shift Value',
        '#type' => 'textfield',
        '#description' => t('The number of places to shift each letter over.'),
        '#element_validate' => array('element_validate_number', 'element_validate_whole_number_cipher', 'element_validate_range'),
        '#required' => TRUE,
    );
    $form['shift_direction'] = array (
        '#title' => 'The direction to shift each value.',
        '#type' => 'select',
        '#description' => t('Enter the direction you would like to shift each value (left or right)'),
        '#options' => array(t('right'), t('left')),
        '#required' => TRUE,

    );

    $form['phrase'] = array (
        '#title' => 'Phrase to Encrypt',
        '#type' => 'textfield',

        '#description' => t('Enter the phrase you would like to encrypt'),
        '#required' => TRUE,
    );

    $form['submit'] =array(
        '#type' => 'submit',
        '#value' => 'Encrypt',
    );
    return $form;

}

// function caesar($string, $distance) {
//     $distance = $distance % 26;
//     $string = strtolower($string);
//     $result = array();
//     $characters = str_split($string);
//
//     if ($distance < 0) {
//         $distance += 26;
//     }
//
//     foreach ($characters as $idx => $char) {
//         $result[$idx] = chr(97 + (ord($char) - 97 + $distance) % 26);
//     }
//
//     return join("", $result);
// }

function element_validate_range($element) {
    if ($element['#value'] < 1 || $element['#value'] > 26 ) {
        form_error($element, t('Number must be between 1 and 26.'));
    }
}

function element_validate_whole_number_cipher($element) {
    if (floor(intval($element['#value'])) != $element['#value']){
        form_error($element, t('Input must be a whole number'));
    }
}

// function element_sanitize_phrase($element) {
//     $element = preg_replace('/[^A-Za-z\. -]/', '', $element);
// }

function cipher_form_submit($form, &$form_state) {
    $shift_value = $form_state['values']['shift_value'];
    $shift_direction = $form_state['values']['shift_direction'];
    $phrase = $form_state['values']['phrase'];
    $characters = preg_replace('/[^A-Za-z\. -]/', '', $phrase);
    $characters = str_split(strtolower($phrase));


    $alpha_range = range('a', 'z');

    $result = '';

    if ($shift_direction == "left") {
        $shift_value = 26 - $shift_value;
    }

    foreach($characters as $character) {
        if(in_array($character, $alpha_range)) {
            $index = array_search($character, $alpha_range);
            $encrypt_index = ($index + $shift_value) % 26;
            $result .= $alpha_range[$encrypt_index];
        }
        else {
            $result = "fuck";

        }
    }

    $_SESSION['encrypt_result'] = $result;
    $result_phrase = $_SESSION['encrypt_result'];

    $form_state['redirect'] = 'encrypted_phrase';
}

function shift_cipher() {
    return '<p>' . $_SESSION['encrypt_result'] . '</p>';
}
